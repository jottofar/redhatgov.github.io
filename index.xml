<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Red Hat | Public Sector</title>
    <link>http://redhatgov.io/</link>
    <description>Recent content on Red Hat | Public Sector</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://redhatgov.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>http://redhatgov.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/about/</guid>
      <description>Open source is not only behind many of the technology industry&#39;s most significant innovations, but it is also pervasive across the U.S. government. For more than a decade, Red Hat has been working closely with federal government customers to help them embrace open source technologies.</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://redhatgov.io/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/contact/</guid>
      <description>We are here to help you Are you curious about something? Do you have some kind of problem with our products?
Please feel free to contact us, our customer service center is working for you 24 hours a day, 7 days a week.
https://www.redhat.com/en/services/support
If you find any issues with the content on this site, please file an issue on our GitHub project at https://github.com/RedHatGov/redhatgov.github.io/</description>
    </item>
    
    <item>
      <title>Content Ideas</title>
      <link>http://redhatgov.io/workshops/example/ideas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/example/ideas/</guid>
      <description>Future Work One of the goals of this example workshop is to showcase all of the things that are possible when building a workshop. Initially, some work needs to be done to highlight what&#39;s already available. It&#39;s also expected that additional features will be added over time.
This &amp;quot;lab&amp;quot; is a place to collect those ideas so that we don&#39;t forget to update this workshop as we have time.</description>
    </item>
    
    <item>
      <title>Create A New Workshop</title>
      <link>http://redhatgov.io/workshops/example/create_a_new_workshop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/example/create_a_new_workshop/</guid>
      <description>Don&#39;t Recreate The Wheel Not only is this example workshop here to show you what&#39;s possible, but it&#39;s also expected to be the starting point and reference for any new workshop.
The easiest way to get started is to copy this workshop into a new directory and add your own content.
 Warning: There are a few things you&#39;ll need to change though, so pay close attention to each step below to save yourself frustration down the road.</description>
    </item>
    
    <item>
      <title>Exercise 1.0 - Intro to Cockpit</title>
      <link>http://redhatgov.io/workshops/security_containers/exercise1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/exercise1.0/</guid>
      <description>Cockpit A remote manager for GNU/Linux servers
 Cockpit is a server manager that makes it easy to administer your GNU/Linux servers via a web browser.
 Cockpit makes it easy for any sysadmin to perform simple tasks, such as administering storage, inspecting journals and starting and stopping services.
 Jumping between the terminal and the web tool is no problem. A service started via Cockpit can be stopped via the terminal.</description>
    </item>
    
    <item>
      <title>Exercise 1.0 - Linux Kernel Capabilities</title>
      <link>http://redhatgov.io/workshops/security_openshift/exercise1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/exercise1.0/</guid>
      <description>Before we get into OpenShift lets explore what Linux Kernel Capabilities are and some of the steps that OpenShift has taken to remove certain capabilities by default.
   What are Linux Capabilities? According to the capabilities man page;
 Capabilities are distinct units of privilege that can be independently enabled or disabled.
 Capabilities were added to the kernel around 15 or so years ago to try to divide up the power of root.</description>
    </item>
    
    <item>
      <title>Exercise 1.0 - Running Ad-hoc commands</title>
      <link>http://redhatgov.io/workshops/ansible_tower/exercise1.0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/ansible_tower/exercise1.0/</guid>
      <description>Section 1: Ad-hoc commands For our first exercise, we are going to run some ad-hoc commands to help you get a feel for how Ansible works. Ansible Ad-Hoc commands enable you to perform tasks on remote nodes without having to write a playbook. They are very useful when you simply need to do one or two things quickly and often, to many remote nodes.
 Step 0: Define your inventory. Inventories are crucial to Ansible as they define remote machines on which you wish to run commands or your playbook(s).</description>
    </item>
    
    <item>
      <title>Exercise 1.1 - Reproducible and Trustworthy Dockerfiles</title>
      <link>http://redhatgov.io/workshops/security_containers/exercise1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/exercise1.1/</guid>
      <description>Now that you&amp;#8217;ve gotten a sense of how Cockpit works, we are going to start digging in at the commandline on Container security. You can use either the Terminal in Cockpit from your browser, a SSH terminal or Terminal client like PuTTy. The choice is yours.
   Best Practices Step 1: Always specify a tag in FROM instructions. FROM redis is bad, because it pulls the latest tag, which changes over time and can be expected to move with major version changes.</description>
    </item>
    
    <item>
      <title>Exercise 1.1 - SELinux</title>
      <link>http://redhatgov.io/workshops/security_openshift/exercise1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/exercise1.1/</guid>
      <description>SELinux is primarily a labeling system that assigns a label (name) to every process and system object. This allows every aspect of kernel operations to be first labeled, second classified, and then ultimately enforced by a set of rules that the provider maintains.
 BENEFITS OF RUNNING SELINUX
   All processes and files are labeled with a type. A type defines a domain for processes, and a type for files.</description>
    </item>
    
    <item>
      <title>Exercise 1.1 - Writing Your First playbook</title>
      <link>http://redhatgov.io/workshops/ansible_tower/exercise1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/ansible_tower/exercise1.1/</guid>
      <description>Now that you&amp;#8217;ve gotten a sense of how ansible works, we are going to write our first ansible playbook. The playbook is where you can take some of those ad-hoc commands you just ran and put them into a repeatable set of plays and tasks.
 A playbook can have multiple plays and a play can have one or multiple tasks. The goal of a play is to map a group of hosts.</description>
    </item>
    
    <item>
      <title>Exercise 1.2 - Deploy OpenShift</title>
      <link>http://redhatgov.io/workshops/security_openshift/exercise1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/exercise1.2/</guid>
      <description>OpenShift v3 is a layered system designed to expose underlying Docker-formatted container image and Kubernetes concepts as accurately as possible, with a focus on easy composition of applications by a developer. For example, install Ruby, push code, and add MySQL.
   OpenShift Step 1: Use the oc command
 These instances have been preconfigured with docker and the oc command. The oc command makes deploying OpenShift for development purposes incredibly easy.</description>
    </item>
    
    <item>
      <title>Exercise 1.2 - Docker `USER`</title>
      <link>http://redhatgov.io/workshops/security_containers/exercise1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/exercise1.2/</guid>
      <description>Now that you&amp;#8217;ve gotten a sense of software provenance in Dockerfiles lets take a look at the USER in Dockerfiles.
 By default docker containers run as root. A docker container running as root has full control of the host system. As docker matures, more secure default options may become available. For now, requiring root is dangerous for others and may not be available in all environments. Your image should use the USER instruction to specify a non-root user for containers to run as.</description>
    </item>
    
    <item>
      <title>Exercise 1.2 - Running Your Playbook</title>
      <link>http://redhatgov.io/workshops/ansible_tower/exercise1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/ansible_tower/exercise1.2/</guid>
      <description>Section 1: Running the Playbook We are now going to run you&amp;#8217;re brand spankin&#39; new playbook on your two web nodes. To do this, you are going to use the ansible-playbook command.
 Step 1: From your playbook directory ( ~/apache_basic ), run your playbook.
 ansible-playbook --private-key=~/.ssh/workshopname-tower -i ../hosts install_apache.yml   However, before you go ahead and run that command, lets take a few moments to understand the options.</description>
    </item>
    
    <item>
      <title>Exercise 1.3 - Image Streams &amp; Secrets</title>
      <link>http://redhatgov.io/workshops/security_openshift/exercise1.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/exercise1.3/</guid>
      <description>Image Stream Image streams can be used to automatically perform an action when new images are created. Builds and deployments can watch an image stream to receive notifications when new images are added and react by performing a build or deployment, respectively.
 For example, if a deployment is using a certain image and a new version of that image is created, a deployment could be automatically performed.</description>
    </item>
    
    <item>
      <title>Exercise 1.3 - Installing Ansible Tower</title>
      <link>http://redhatgov.io/workshops/ansible_tower/exercise1.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/ansible_tower/exercise1.3/</guid>
      <description>In this exercise, we are going to get Ansible Tower installed on your control node
   Installing Ansible Tower Step 1: SSH into your control node
  Step 2: Change directories to /tmp
 cd /tmp    Step 3: Download the latest Ansible Tower package
 curl -O http://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-latest.tar.gz    Step 4: Untar and unzip the package file
 tar xvfz /tmp/ansible-tower-setup-latest.tar.gz    Step 5: Change directories into the ansible tower package</description>
    </item>
    
    <item>
      <title>Exercise 1.3 - Remove setuid/setgid Binaries</title>
      <link>http://redhatgov.io/workshops/security_containers/exercise1.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/exercise1.3/</guid>
      <description>There are two special permissions that can be set on executable files: Set User ID (setuid) and Set Group ID (sgid). These permissions allow the file being executed to be executed with the privileges of the owner or the group. For example, if a file was owned by the root user and has the setuid bit set, no matter who executed the file it would always run with root user privileges.</description>
    </item>
    
    <item>
      <title>Exercise 1.4 - Configuring Ansible Tower</title>
      <link>http://redhatgov.io/workshops/ansible_tower/exercise1.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/ansible_tower/exercise1.4/</guid>
      <description>In this exercise, we are going to configure Tower so that we can run a playbook.
   Configuring Ansible Tower There are a number of contructs in the Ansible Tower UI that enable multi-tenancy, notifications, scheduling, etc. However, we are only going to focus on a few of the key contructs that are required for this workshop today.
   Credentials
  Projects
  Inventory</description>
    </item>
    
    <item>
      <title>Exercise 1.4 - Linux Kernel Capabilities</title>
      <link>http://redhatgov.io/workshops/security_containers/exercise1.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/exercise1.4/</guid>
      <description>What are Linux Capabilities? According to the capabilities man page;
 Capabilities are distinct units of privilege that can be independently enabled or disabled.
 Capabilities were added to the kernel around 15 or so years ago to try to divide up the power of root. Originally the kernel allocated a 32-bit bitmask to define these capabilities. A few years ago it was expanded to 64. There are currently around 38 capabilities defined.</description>
    </item>
    
    <item>
      <title>Exercise 1.4 - Skopeo</title>
      <link>http://redhatgov.io/workshops/security_openshift/exercise1.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/exercise1.4/</guid>
      <description>Skopeo is a command line utility for various operations on container images and image repositories.
 Skopeo is able to inspect a repository on a Docker registry and fetch images layers. By inspect I mean it fetches the repository&amp;#8217;s manifest and it is able to show you a docker inspect-like json output about a whole repository or a tag.
 This tool, in contrast to docker inspect, helps you gather useful information about a repository or a tag before pulling it (using disk space) - e.</description>
    </item>
    
    <item>
      <title>Exercise 1.5 - Atomic Scanner</title>
      <link>http://redhatgov.io/workshops/security_openshift/exercise1.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/exercise1.5/</guid>
      <description>The atomic command-line tool provides a way to interact and manage Atomic Host systems and containers. It provides a high level, coherent entrypoint to the system and makes it easier to interact with special kinds of containers, such as super-privileged containers, and debugging tools.
 The atomic command uses tools such as docker, ostree and skopeo to manage containers and container host systems. There are also a lot of features built into the atomic command that are not available in the docker command.</description>
    </item>
    
    <item>
      <title>Exercise 1.5 - Creating and Running a Job Template</title>
      <link>http://redhatgov.io/workshops/ansible_tower/exercise1.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/ansible_tower/exercise1.5/</guid>
      <description>A job template is a definition and set of parameters for running an Ansible job. Job templates are useful to execute the same job many times.
   Creating a Job Template Step 1: Select JOB TEMPLATES
  Step 2: Click on ADD 
  Step 3: Complete the form using the following values
     NAME
 Apache Basic Job Template
   DESCRIPTION</description>
    </item>
    
    <item>
      <title>Exercise 1.5 - Read Only Containers</title>
      <link>http://redhatgov.io/workshops/security_containers/exercise1.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/exercise1.5/</guid>
      <description>Now that you&amp;#8217;ve gotten a sense of Linux Kernel Capabilities, let&amp;#8217;s move on to Readonly Containers.
 Imagine a scenario where an application gets compromised. The first thing the bad guy wants to do is to write an exploit into the application, so that the next time the application starts up, it starts up with the exploit in place. If the container was read­only it would prevent leaving a backdoor in place and be forced to start the cycle from the beginning.</description>
    </item>
    
    <item>
      <title>Exercise 1.6 - SCC &amp; Seccomp</title>
      <link>http://redhatgov.io/workshops/security_openshift/exercise1.6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/exercise1.6/</guid>
      <description>In addition to authorization policies that control what a user can do, OpenShift Container Platform provides security context constraints (SCC) that control the actions that a pod can perform and what it has the ability to access. Administrators can manage SCCs using the CLI.
 SCCs are objects that define a set of conditions that a pod must run with in order to be accepted into the system. They allow an administrator to control the following:</description>
    </item>
    
    <item>
      <title>Exercise 1.6 - SELinux</title>
      <link>http://redhatgov.io/workshops/security_containers/exercise1.6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/exercise1.6/</guid>
      <description>Now that you&amp;#8217;ve gotten a sense of Read Only Containers, let&amp;#8217;s move on to SELinux.
 In this section, we’ll cover the basics of SELinux and containers. SELinux policy prevents a lot of break out situations where the other security mechanisms fail. With SELinux on Docker, we write policy that says that the container process running as svirt_lxc_net_t can only read/write files with the svirt_sandbox_file_t label.
   Step 1: Create the following directories.</description>
    </item>
    
    <item>
      <title>Exercise 1.7 - Red Hat Security API</title>
      <link>http://redhatgov.io/workshops/security_openshift/exercise1.7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/exercise1.7/</guid>
      <description>Red Hat Product Security is committed to providing tools and security data to help you better understand security threats. This data has been available on our Security Data page and will now also be available in a machine-consumable format with the Security Data API. This tool will allow customers to programmatically query the API for data that was previously exposed only through files on our Security Data page.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://redhatgov.io/workshops/openshift/getting-started/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift/getting-started/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Lab - Building and Deploying a Fast-Moving Monolith</title>
      <link>http://redhatgov.io/workshops/strangling_the_monolith/lab1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/strangling_the_monolith/lab1/</guid>
      <description>FAST-MOVING MONOLITH  Large organizations have a tremendous amount of resources invested in existing monolith applications Looking for a sane way to capture the benefits of containers and orchestration without having to complete rewrite OpenShift provides the platform for their existing investment with the benefit of a path forward for microservice based apps in the future  FAST-MOVING MONOLITH ADVANTAGES  Easier to develop since all dependencies are included Single code base for teams to work on No API backwards compatibility issues since all logic is packaged with the application Single deployable unit  Step 1  In this lab, the coolstore monolith will be built and deployed to OpenShift from your local workstation demonstrating a typical Java application developer workflow A sample pipeline is included which will be used to deploy across dev and prod environment First, deploy the coolstore monolith dev project (don’t forget to include -b app-partner when you run git clone - this is the branch in use for this lab!</description>
    </item>
    
    <item>
      <title>Lab - Login &amp; Tour of Guacamole</title>
      <link>http://redhatgov.io/workshops/strangling_the_monolith/login_tour_guac/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/strangling_the_monolith/login_tour_guac/</guid>
      <description>This lab provides a quick tour of the Guacamole CLI server to help you get familiar with lab environment along with some key terminology we will use in subsequent lab content.
If you are already familiar with the basics of Guacamole you can skip this lab — after making sure you can login.
Accessing Guacamole Guacamole is an HTML5 web application that provides access to desktop environments using remote desktop protocols (such as VNC or RDP).</description>
    </item>
    
    <item>
      <title>Lab - Login &amp; Tour of OpenShift</title>
      <link>http://redhatgov.io/workshops/strangling_the_monolith/login_tour_oc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/strangling_the_monolith/login_tour_oc/</guid>
      <description>Welcome to OpenShift! This lab provides a quick tour of the console to help you get familiar with the user interface along with some key terminology we will use in subsequent lab content. If you are already familiar with the basics of OpenShift you can skip this lab - after making sure you can login.
Key Terms We will be using the following terms throughout the workshop labs so here are some basic definitions you should be familiar with.</description>
    </item>
    
    <item>
      <title>Lab - Microservice Integration Patterns</title>
      <link>http://redhatgov.io/workshops/strangling_the_monolith/lab3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/strangling_the_monolith/lab3/</guid>
      <description>Microservice Integration Patterns  In previous labs, we created two new microservices with the intention of replacing functionality (“strangling”) the monolithic application. Currently no traffic is routed to them. If you were to re-route traffic from the monolith’s /services/products API to the new catalog service’s /services/catalog endpoint, you would be missing the inventory data. In this lab we will consider different options and architectures for integrating the microservices’ functionality into our app.</description>
    </item>
    
    <item>
      <title>Lab - Strangle Your Monolith</title>
      <link>http://redhatgov.io/workshops/strangling_the_monolith/lab2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/strangling_the_monolith/lab2/</guid>
      <description>Strangling the Monolith Design Pattern  Strangling - incrementally replacing functionality in app with something better (cheaper, faster, easier to maintain). As functionality is replaced, “dead” parts of monolith can be removed/retired. You can also wait for all functionality to be replaced before retiring anything! You can optionally include new functionality during strangulation to make it more attractive to business stakeholders.  Strangling the Monolith Design Pattern         https://paulhammant.</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>http://redhatgov.io/workshops/example/prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/example/prerequisites/</guid>
      <description>Getting Started This entire site, including the workshop content, is built using a tool named Hugo. Hugo is known as a &amp;quot;static site generator&amp;quot; where the content you build is pre-compiled before being served by a web server.
The Good News The good news is that you don&#39;t have to worry about how Hugo works, how to configure it, or how everything gets deployed.
All of that is being handled for you and you can focus on the content of your workshop.</description>
    </item>
    
    <item>
      <title>Prerequisites</title>
      <link>http://redhatgov.io/workshops/strangling_the_monolith/prerequisites/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/strangling_the_monolith/prerequisites/</guid>
      <description>If we provided you a laptop or cloud environment We already set all this up for you — feel free to skip everything below!
 Install oc Click here for instructions on how to install the OpenShift Container Platform CLI.
Install git Click here for instructions on how to install Git on your workstation.
Create GitHub account Click here for instructions on how to setup an account.</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>http://redhatgov.io/workshops/ansible_tower/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/ansible_tower/setup/</guid>
      <description>Setup  Today&amp;#8217;s workshop infrastructure is being run in Amazon EC2.
  Each student will have two instances to use.
   Tower https://workshopname.tower.0.redhatgov.io:8888/wetty/ssh/ec2-user    Node 1 http://workshopname.0.redhatgov.io     Each of you should have received an email. It has the following information on it.
   If you didn&amp;#8217;t get one of these emails, let us know so we can give you the information about your lab environment.</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>http://redhatgov.io/workshops/security_containers/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/setup/</guid>
      <description>Today&amp;#8217;s workshop infrastructure is being run in Amazon EC2. Each student will have a single instance to use. Each of you should have received an email. It has the following information on it. Your student number will be substituted where you see this &amp;lt; student# &amp;gt;. Example: if you are student 21: http://dc17.21.redhatgov.io
   Web URL for each of your EC2 instances.
  Username and password</description>
    </item>
    
    <item>
      <title>Setup</title>
      <link>http://redhatgov.io/workshops/security_openshift/setup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/setup/</guid>
      <description>Today&amp;#8217;s workshop infrastructure is being run in Amazon EC2. Each student will have a single instance to use. Each of you should have received an email. It has the following information on it. Your student number will be substituted where you see this &amp;lt; student# &amp;gt;. Example: if you are student 21: http://dc17.21.redhatgov.io
   EC2 SSH Key
  Web URL for each of your EC2 instances.</description>
    </item>
    
    <item>
      <title>Wrap Up</title>
      <link>http://redhatgov.io/workshops/security_containers/wrapup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_containers/wrapup/</guid>
      <description>That wraps up what we have planned for today. We hope you&amp;#8217;ve learned something valuable about Container Security that you can apply in your daily role.
 What do you think? How can we help you understand Container Security better?
 Before you leave, check out the Resources page that is part of this guide. There you can find a ton of links that will further your Container education.
 This Participant Guide will remain active for the next two weeks.</description>
    </item>
    
    <item>
      <title>Wrap Up</title>
      <link>http://redhatgov.io/workshops/security_openshift/wrapup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/security_openshift/wrapup/</guid>
      <description>That wraps up what we have planned for today. We hope you&amp;#8217;ve learned something valuable about OpenShift Security that you can apply in your daily role.
 What do you think? How can we help you understand OpenShift Security better?
 Before you leave, check out the Resources page that is part of this guide. There you can find a ton of links that will further your OpenShift education.
 This Participant Guide will remain active for the next two weeks.</description>
    </item>
    
    <item>
      <title>Wrapup</title>
      <link>http://redhatgov.io/workshops/ansible_tower/wrapup/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/ansible_tower/wrapup/</guid>
      <description>That wraps up what we have planned for today. We hope you&amp;#8217;ve learned something valuable
about Ansible and Ansible Tower that you can apply in your daily role.
 What do you think? How can we help you understand Ansible Tower better?
 Before you leave, check out the Resources page that is part of this guide. There you can
find a ton of links that will further your Ansible education.</description>
    </item>
    
  </channel>
</rss>